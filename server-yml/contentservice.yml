server:
  port: 443
  ssl:
    enabled: true
    trust-store: file:///C:/ssl/truststore.jks
    trust-store-password: QWas!@34
    key-store: file:///C:/ssl/server.p12
    key-store-password: QWas!@34
    key-store-type: PKCS12
    key-alias: server-ssl-key
    client-auth: none #Mutual TLS를 안 쓰는 경우 (기본 HTTPS만 쓸 경우)

spring:
  datasource:
    #url: jdbc:mysql://192.168.1.101:3306/project?characterEncoding=UTF-8&serverTimezone=UTC
    url: jdbc:mariadb://192.168.1.101:3306/project?characterEncoding=UTF-8&serverTimezone=UTC
    username: root
    password: QWas!@34
    #driver-class-name: com.mysql.cj.jdbc.Driver
    driver-class-name: org.mariadb.jdbc.Driver
  jpa:
    properties:
      hibernate:
        ddl-auto: update
        show_sql: true         #모든 SQL문을 콘솔로 출력
        format_sql: true       #JPA 실행쿼리 가독성있게 표현
        use_sql_comments: true #SQL문 이외에 추가적인 정보 출력
        dialect: org.hibernate.dialect.MariaDBDialect
  security:
    user:
      name: root
      password: QWas1234
  data:
    redis:
      host: 192.168.1.101
      port: 6379
      password: QWas1234
      timeout: 60000
      
logging:
  level:
    ROOT: INFO
    com.ehas.content.user: DEBUG
    com.ehas.content.content: DEBUG
    org.springframework.web: DEBUG
    org.springframework.security: DEBUG
    org.hibernate: DEBUG
    com.netflix.discovery.DiscoveryClient: ERROR
    org.apache.hc.client5.http.headers: INFO
    org.apache.hc.client5.http.impl.classic: INFO
    org.apache.hc.client5.http.impl.io: INFO
    org.apache.hc.client5.http.impl: INFO
    org.apache.hc.client5: INFO
    org.springframework.web.client.RestTemplate: INFO
    sun.rmi: WARN
    javax.management.remote.rmi: WARN

eureka:
  instance:
    prefer-ip-address: true
    secure-port-enabled: true
    hostname: 192.168.1.102  # 실제 IP 주소
    #instance-id: ${spring.application.instance_id:${random.value}}:${server.port}
    lease-renewal-interval-in-seconds: 3
    lease-expiration-duration-in-seconds: 10
    enable-self-preservation: true
    instance-id: ${spring.cloud.client.hostname}:${spring.application.instance_id:${random.value}}
    metadata-map:
      instanceId: ${spring.application.name}:${spring.application.instance_id:${random.value}}
      protocol: https
  client:
    register-with-eureka: true
    fetch-registry:       true
    disable-delta:        true
    registry-fetch-interval-seconds: 5
    service-url.defaultZone: http://root:QWas1234@192.168.1.102:8761/eureka

jwt:
  header : Authorization #X-AUTH-TOKEN
  secretkey : secretkeysecretkeysecretkeysecretkeysecretkeysecretkeysecretkeysecretkeysecretkeysecretkey
  access-Token-expiration : 3600000    # 60 * 60 * 1000L ( 1시간 )
  refresh-token-expiration : 604800000 #7 * 24 * 60 * 60 * 1000L ( 7일 )

management:
  endpoints:
    web:
      exposure:
        include: '*'
message:
  security:
    allow-ip-list: 127.0.0.1, 192.168.1.128, 192.168.1.101, 192.168.1.102
  kafka:
    producer:
      bootstrap-servers: 192.168.101:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      topic:
        name: TestTopic
 