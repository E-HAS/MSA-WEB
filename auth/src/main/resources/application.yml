server:
  port: 8888

spring:
  application:
    name: AUTH-SERVICE
  main:
    web-application-type: reactive
  datasource:
    url: jdbc:mariadb://127.0.0.1:3307/SPRING_DB?characterEncoding=UTF-8&serverTimezone=UTC
    username: root
    password: QWas!@34
    driver-class-name: org.mariadb.jdbc.Driver
  r2dbc:
    url: r2dbc:pool:mariadb://127.0.0.1:3307/SPRING_DB
    username: root
    password: QWas!@34
  jpa:
    properties:
      hibernate:
        ddl-auto: create
        show_sql: true         #모든 SQL문을 콘솔로 출력
        format_sql: true       #JPA 실행쿼리 가독성있게 표현
        use_sql_comments: true #SQL문 이외에 추가적인 정보 출력
  security:
    user:
      name: root
      password: QWas1234
  kafka:
    bootstrap-servers: 175.198.90.224:9092
      # 192.168.254.16:9092
      #- 192.168.1.128:9092
      #- 172.29.236.188:9092
    consumer:
      #bootstrap-servers: 192.168.254.16:9092
      # bootstrap-servers: 192.168.0.4:9092 #consumer bootstrap servers가 따로 존재하면 설정
      group-id: TestGroup
      # Kafka 서버에 초기 offset이 없거나, 서버에 현재 offset이 더 이상 존재하지 않을 경우 수행할 작업을 설정
      # latest: 가장 최근에 생산된 메시지로 offeset reset
      # earliest: 가장 오래된 메시지로 offeset reset
      # none: offset 정보가 없으면 Exception 발생
      auto-offset-reset: earliest
      # 데이터를 받아올 때, key/value를 역직렬화
      # JSON 데이터를 받아올 것이라면 JsonDeserializer
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      #bootstrap-servers: 192.168.254.16:9092
      # bootstrap-servers: 3.34.97.97:9092 # producer bootstrap servers가 따로 존재하면 설정
      # 데이터를 보낼 때, key/value를 직렬화
      # JSON 데이터를 보낼 것이라면 JsonDeserializer
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
logging:
  level:
    org.springframework.r2dbc.core: debug
    
#https://subji.github.io/posts/2020/08/11/springcloudeurekaregistry#google_vignette
eureka:
  instance:
    instance-id: ${spring.application.instance_id:${random.value}}:${server.port}
    lease-renewal-interval-in-seconds: 3
    lease-expiration-duration-in-seconds: 10
    enable-self-preservation: true
  client:
    register-with-eureka: true
    fetch-registry:       true
    disable-delta:        true
    registry-fetch-interval-seconds: 5
    service-url.defaultZone:         http://root:QWas1234@localhost:8761/eureka
    
    
jwt:
  header : X-AUTH-TOKEN
  secretkey : secretkeysecretkeysecretkeysecretkeysecretkeysecretkeysecretkeysecretkeysecretkeysecretkey
  expiration : 600000  

message:
  topic:
    name: TestTopic

 