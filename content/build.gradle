plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.12'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.ehas'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2023.0.5")
}

dependencies {
	// Spring Boot Starters
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator:3.1.5'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.1.5'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis:3.1.5'
	implementation 'org.springframework.boot:spring-boot-starter-security:3.1.5'
	
	// JWT 
	implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.6'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.6'
	
	// MySQL Driver
	//implementation 'mysql:mysql-connector-java:8.0.33'
	// MariaDB Driver
	implementation 'org.mariadb.jdbc:mariadb-java-client:3.3.2'

	// Spring Cloud
	implementation 'org.springframework.cloud:spring-cloud-starter-config:3.1.5'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:3.1.5'

	// Jackson
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.2'
	implementation 'com.fasterxml.jackson.core:jackson-annotations:2.14.2'

	implementation 'jakarta.persistence:jakarta.persistence-api'

	// QueryDSL
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	implementation 'com.querydsl:querydsl-core'
	implementation 'com.querydsl:querydsl-collections'
	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	
	// Kafka
	implementation 'org.springframework.kafka:spring-kafka:3.2.2'

	// Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

// QueryDSL Q 클래스 생성 디렉토리 설정
def generated = 'src/main/generated'

tasks.withType(JavaCompile) {
	options.annotationProcessorGeneratedSourcesDirectory = file(generated)
}

// Q 클래스 디렉토리를 sourceSet에 포함
sourceSets {
	main.java.srcDirs += [generated]
}

// gradle clean 시 생성된 Q 클래스 삭제
clean {
	delete file(generated)
}